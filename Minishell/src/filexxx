/ void	ft_pipes(int in, int out, t_cmd	*cmd)
// {
// 	int	pid;
// 	int	fd_stdout;

// 	fd_stdout = dup(STDOUT_FILENO);
// 	pid = fork();
// 	if (pid == 0)
// 	{
// 	printf("2cmd: %s fd in: %d\n",cmd->argv[0], cmd->std_in);
// 	printf("2cmd: %s fd out: %d\n",cmd->argv[0], cmd->std_out);
// 		if (in != 0)
// 		{
// 			dup2(in, 0);
// 			close(in);
// 		}
// 		if (out != 1)
// 		{
// 			dup2(out, 1);
// 			close(out);
// 		}
// 		dup2(cmd->std_out, 1);
// 		if (ft_handle_builtins(cmd) == FAIL)
// 		{
// 			ft_handle_execv(cmd->argv);
// 			dup2(fd_stdout, STDOUT_FILENO);
// 		}
// 		else
// 			exit(1);
// 	}
// }

// void	ft_fork(t_cmd *cmd)
// {
// 	t_cmd	*tmp;
// 	int		pid;
// 	int		in;
// 	int		fd[2];
// 	int		fd_stdout;
// 	int		fd_stdin;


// 	tmp = cmd;
// 	in = tmp->std_in;
// 	fd_stdout = dup(STDOUT_FILENO);
// 	while (tmp->next != NULL)
// 	{
// 		pipe(fd);
// 		ft_pipes(in, fd[1], tmp);
// 		close(fd[1]);
// 		in = fd[0];
// 		tmp = tmp ->next;
// 	}
// 	if (in != 0)
// 		dup2(in, 0);
// 	dup2(tmp->std_out, STDOUT_FILENO);
// 	dup2(tmp->std_in, STDIN_FILENO);
// 	printf("1cmd: %s fd in: %d\n",tmp->argv[0], tmp->std_in);
// 	printf("1cmd: %s fd out: %d\n",tmp->argv[0], tmp->std_out);
// 	if (ft_handle_builtins(tmp) == FAIL)
// 	{
// 		ft_handle_execv(tmp->argv);
// 		dup2(fd_stdout, STDOUT_FILENO);
// 	}
// 	else
// 		exit(1);
// }